#include <stdio.h>
#include "Socket.h"

namespace System
{ 
	namespace Net
	{

#ifdef WIN32
		// Used for WIN32 Socket initialization
		WinsockInit winsockInit;

		//////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////
		WinsockInit::WinsockInit(WORD wVersionRequested)
		//////////////////////////////////////////////////////////////////////////
		{
			m_iStatus = WSAStartup(wVersionRequested, &m_wsd);
		}

		//////////////////////////////////////////////////////////////////////////
		WinsockInit::~WinsockInit()
		//////////////////////////////////////////////////////////////////////////
		{
			WSACleanup();
		}
#endif

		//////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////
		Socket::Socket()
			: m_oSock(INVALID_SOCKET)
		//////////////////////////////////////////////////////////////////////////
		{
		}

		//////////////////////////////////////////////////////////////////////////
		Socket::Socket( const Socket& s )
			: m_oSock(s.m_oSock)
		//////////////////////////////////////////////////////////////////////////
		{
			m_oAddress = s.m_oAddress;
		}

		//////////////////////////////////////////////////////////////////////////
		Socket::Socket( SOCKET s, InetAddr address )
			: m_oSock(s)
		//////////////////////////////////////////////////////////////////////////
		{
			m_oAddress = address;
		}

		//////////////////////////////////////////////////////////////////////////
		Socket::~Socket()
		//////////////////////////////////////////////////////////////////////////
		{
		}

		//////////////////////////////////////////////////////////////////////////
		bool Socket::Create()
		//////////////////////////////////////////////////////////////////////////
		{
			m_oSock = socket(AF_INET, SOCK_STREAM, 0);
			return ( m_oSock != INVALID_SOCKET );
		}

		//////////////////////////////////////////////////////////////////////////
		void Socket::Close()
		//////////////////////////////////////////////////////////////////////////
		{
#ifdef WIN32
			shutdown( m_oSock, 2 );
			closesocket( m_oSock );
#else // LINUX
			shutdown( m_oSock, SHUT_RDWR );
			close ( m_oSock );
#endif

			m_oSock = INVALID_SOCKET;
		}

		//////////////////////////////////////////////////////////////////////////
		bool Socket::Connect(const InetAddr& addr)
		//////////////////////////////////////////////////////////////////////////
		{
			return connect(m_oSock, (const sockaddr*)&addr, sizeof(sockaddr)) != SOCKET_ERROR;
		}

		//////////////////////////////////////////////////////////////////////////
		int Socket::Send(const void* buf, int cbBuf)
		//////////////////////////////////////////////////////////////////////////
		{
			return send(m_oSock, (const char*)buf, cbBuf, 0);
		}

		//////////////////////////////////////////////////////////////////////////
		int Socket::printf(const char* fmt, ...)
		//////////////////////////////////////////////////////////////////////////
		{
			va_list marker;
			va_start(marker, fmt);

			char szBuf[1024*4];
			vsprintf(szBuf, fmt, marker);

			va_end(marker);

			return Send((unsigned char*)szBuf, (int)strlen(szBuf));
		}

		//////////////////////////////////////////////////////////////////////////
		int Socket::Receive(void* buf, int cbBuf)
		//////////////////////////////////////////////////////////////////////////
		{
			return ( recv(m_oSock, (char*)buf, cbBuf, 0) );
		}

		//////////////////////////////////////////////////////////////////////////
		bool Socket::SetOpt(int opt, const char* pBuf, int cbBuf)
		//////////////////////////////////////////////////////////////////////////
		{
			return setsockopt(m_oSock, SOL_SOCKET, opt, pBuf, cbBuf) != SOCKET_ERROR;
		}

		//////////////////////////////////////////////////////////////////////////
		bool Socket::GetOpt(int opt, char* pBuf, int& cbBuf)
		//////////////////////////////////////////////////////////////////////////
		{
			return getsockopt(m_oSock, SOL_SOCKET, opt, pBuf, (socklen_t *)&cbBuf) != SOCKET_ERROR;
		}

	}

}

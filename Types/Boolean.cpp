//#include <iostream>     
#include <sstream>     
#include <iomanip>

#include "Boolean.h"

namespace System
{
	namespace Types
	{
		///////////////////////////////////////////////////////////////////////
		static int lower(int c)
		///////////////////////////////////////////////////////////////////////
		{
			return std::tolower((unsigned char)c);
		}

		///////////////////////////////////////////////////////////////////////
		Boolean::Boolean ( ) : value ( false )
		///////////////////////////////////////////////////////////////////////
		{

		}

		///////////////////////////////////////////////////////////////////////
		Boolean::Boolean ( bool value )
		///////////////////////////////////////////////////////////////////////
		{
			this->value = value;
		}

		///////////////////////////////////////////////////////////////////////
		Boolean::Boolean ( std::string value )
		///////////////////////////////////////////////////////////////////////
		{
			this->value = Boolean::ParseBoolean ( value );
		}

		///////////////////////////////////////////////////////////////////////
		Boolean::~Boolean(void)
		///////////////////////////////////////////////////////////////////////
		{
		}

		///////////////////////////////////////////////////////////////////////
		bool Boolean::ParseBoolean ( std::string value )
		///////////////////////////////////////////////////////////////////////
		{
			// Make the data lower case
			std::transform (value.begin(), value.end(), 
							value.begin(), 
							lower);

			if ( value == "true" || value == "t" )
				return true;

			if ( value == "false" || value == "f" )
				return false;

			throw BooleanFormatException ( );
		}

		///////////////////////////////////////////////////////////////////////
		std::string Boolean::ToString ( bool value )
		///////////////////////////////////////////////////////////////////////
		{
			return ( value ? "true" : "false" );
		}
		
		///////////////////////////////////////////////////////////////////////
		bool Boolean::operator == ( const Boolean &right )
		///////////////////////////////////////////////////////////////////////
		{
			return ( this->value == right.value );
		}

		///////////////////////////////////////////////////////////////////////
		bool Boolean::operator != ( const Boolean &right )
		///////////////////////////////////////////////////////////////////////
		{
			return ( this->value != right.value );
		}
	}
}
